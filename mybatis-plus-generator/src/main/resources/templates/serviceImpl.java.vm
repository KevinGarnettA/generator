package ${package.RepositoryImpl};
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import cn.hutool.json.JSONObject;
import java.util.Objects;
/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
#if(${kotlin})
@Slf4j
open class ${table.RepositoryImplName} : ${superRepositoryImplClass}<${table.mapperName}, ${entity}>(), ${table.RepositoryName} {

}
#else
public class ${table.serviceImplName} extends ServiceImpl<${table.mapperName}, ${entity}> implements ${table.serviceName}  {

    @Autowired
    private BaseService baseService;

    public  ${entity}Res get${entity}(Long id){
        ${entity}Res ${entityLowerCase}Res = new ${entity}Res();
        ${entity} ${entityLowerCase} = this.getById(id);
        JSONObject references = new JSONObject();
        if(EmptyUtil.isNotEmpty(${entityLowerCase})){
            references.set("createUsers", baseService.getUserInfos(ListUtil.of(${entityLowerCase}.getCreatedBy(),${entityLowerCase}.getUpdatedBy()), ${entityLowerCase}.getEntId(), ${entityLowerCase}.getProjectId()));
        }
        ${entityLowerCase}Res.setValue(${entityLowerCase});
        ${entityLowerCase}Res.setReferences(references);
        return ${entityLowerCase}Res;
    }

    /**
     * 保存
     * @param request
     */
    public void save${entity}(${entity}SaveReq request){
        ${entity} ${entityLowerCase} = new ${entity}();
        BeanUtil.copyProperties(request, ${entityLowerCase});
        ${entityLowerCase}.setDeleteStatus(0);
        this.saveOrUpdate(${entityLowerCase});
    }

    /**
    *删除
    * @param request
    */
    public void delete${entity}(${entity}DeleteReq request){
        LambdaUpdateWrapper<${entity}> wrapper = new LambdaUpdateWrapper<>();
        wrapper.set(${entity}::getDeleteStatus, 1);
        wrapper.in(${entity}::getXmindId,request.getIds());
        this.update(wrapper);
    }

    /**
    * 列表查询
    * @param request
    */
    public List<${entity}> get${entity}List(${entity}ListReq request){
        ${entity} ${entityLowerCase} = new ${entity}();
        BeanUtil.copyProperties(request, ${entityLowerCase});
        LambdaQueryWrapper<${entity}> cond = new LambdaQueryWrapper<>();
        //TODO
        return this.list(cond);
    }

    /**
    * 分页查询
     * @param request
    */
    public PageUtils get${entity}PageList(${entity}PageReq request){
        LambdaQueryWrapper<${entity}> cond = new LambdaQueryWrapper<>();
        //TODO
##        cond.eq(${entity}::getTaskId,request.getTaskId());
        Page<${entity}> ${entity}Page = baseMapper.selectPage(new Page<>(request.getPage(), request.getPageSize()), cond);
        List<${entity}> records = ${entity}Page.getRecords();
        if (CollectionUtil.isEmpty(records)) {
            return new PageUtils();
        }
        // 设置任务的执行进度
        Page<${entity}> result = new Page<>();
        JSONObject references = new JSONObject();
        result.setRecords(${entity}Page.getRecords());
        // 如有其它属性填充 可以在这里添加。
        result.setTotal(${entity}Page.getTotal());
        result.setSize(${entity}Page.getSize());
        result.setCurrent(${entity}Page.getCurrent());
        result.setPages(${entity}Page.getPages());

        List<Long> createUserIdList = ${entity}Page.getRecords().stream().map(${entity}::getCreatedBy).filter(Objects::nonNull).collect(Collectors.toList());
        List<Long> updateUserIdList = ${entity}Page.getRecords().stream().map(${entity}::getUpdatedBy).filter(Objects::nonNull).collect(Collectors.toList());
        List<Long> allUserIdList = new ArrayList<>();
        allUserIdList.addAll(createUserIdList);
        allUserIdList.addAll(updateUserIdList);
        references.set("users", baseService.getUserInfos((allUserIdList), request.getEntId(), request.getProjectId()));
        return new PageUtils(result, references);
    }
}
#end
